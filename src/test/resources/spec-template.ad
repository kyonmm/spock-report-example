<%  def fmt = new com.athaydes.spockframework.report.internal.StringFormatHelper()
    def stats = com.athaydes.spockframework.report.util.Utils.stats( data )
 %>== Report for ${data.info.description.className}

=== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate 													 |Total time												|Failures					 |Errors					|Skipped
|${stats.totalRuns}|${fmt.toPercentage(stats.successRate)} |${fmt.toTimeDuration(stats.time)} |${stats.failures} |${stats.errors} |${stats.skipped}
|====


<%
    def specTitle = utils.specAnnotation( data, spock.lang.Title )?.value()
    if ( specTitle ) {
        specTitle.split('\n').each { out << '##' << it << '\n' }
    }
    if ( data.info.narrative ) {
        if ( specTitle ) { out << '\n' }
        out << '<pre>\n' << data.info.narrative << '\n</pre>'
    }

    def writeIssuesOrSees = { issues, description ->
        if ( issues?.value() ) {
            out << '\n#### ' << description << ':\n\n'
            issues.value().each { issue ->
                out << '* ' << issue << '\n'
            }
        }
    }
    def writePendingFeature = { pendingFeature ->
        if ( pendingFeature ) {
            out << '\n> Pending Feature\n'
        }
    }
    def writeHeaders = { headers ->
        if ( headers ) {
            headers.each { h ->
                out << '++++' << '\n' << h << '\n' << '++++' << '\n'
            }
        }
    }
    def writeExtraInfo = { extraInfo ->
        if ( extraInfo ) {
            extraInfo.each { info ->
                out << '* ' << info << '\n'
            }
        }
    }
    writeIssuesOrSees( utils.specAnnotation( data, spock.lang.Issue ), 'Issues' )
    writeIssuesOrSees( utils.specAnnotation( data, spock.lang.See ), 'See' )
    writeHeaders( utils.specHeaders( data ) )
%>


=== Features
<%
    features.eachFeature { name, result, blocks, iterations, params ->
%>
==== $name
<%
 writePendingFeature( description.getAnnotation( spock.lang.PendingFeature ) )
 writeIssuesOrSees( description.getAnnotation( spock.lang.Issue ), 'Issues' )
 writeIssuesOrSees( description.getAnnotation( spock.lang.See ), 'See' )
 if ( utils.isUnrolled( delegate ) ) {
    writeExtraInfo( utils.nextSpecExtraInfo( data ) )
 } else {
    // collapse all iterations
    (1..iterations.size()).each {
        writeExtraInfo( utils.nextSpecExtraInfo( data ) )
    }
 }
%>
Result: **$result**
<%
        for ( block in blocks ) {
 %>
* ${block.kind} ${block.text}
<%
        }
        def executedIterations = iterations.findAll { it.dataValues || it.errors }
        if ( params && executedIterations ) {
 %>
[options="header"]
|====
| ${params.join( ' | ' )} |
<%
            for ( iteration in executedIterations ) {
%>| ${iteration.dataValues.join( ' | ' )} | ${iteration.errors ? '(FAIL)' : '(PASS)'}
<%          }
%>|====
<%      }
        def problems = executedIterations.findAll { it.errors }
        if ( problems ) {
            out << "\nThe following problems occurred:\n\n"
            for ( badIteration in problems ) {
                if ( badIteration.dataValues ) {
                    out << '* ' << badIteration.dataValues << '\n'
                }
                for ( error in badIteration.errors ) {
                    out << '----\n' << error << '\n----\n'
                }
            }
        }
    }
 %>